/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Uint64, GetBurnRequestResponse, GetBurnRequestsLengthResponse, GetCustodianResponse, GetMintRequestResponse, GetMintRequestsLengthResponse, GetOwnerResponse, GetTokenDenomResponse, IsCustodianResponse, IsMerchantResponse, IsOwnerResponse } from "./WbtcController.types";
export interface WbtcControllerReadOnlyInterface {
    contractAddress: string;
    getMintRequest: ({ nonce }: {
        nonce: Uint64;
    }) => Promise<GetMintRequestResponse>;
    getMintRequestsLength: () => Promise<GetMintRequestsLengthResponse>;
    getBurnRequest: ({ nonce }: {
        nonce: Uint64;
    }) => Promise<GetBurnRequestResponse>;
    getBurnRequestsLength: () => Promise<GetBurnRequestsLengthResponse>;
    getTokenDenom: () => Promise<GetTokenDenomResponse>;
    isMerchant: ({ address }: {
        address: string;
    }) => Promise<IsMerchantResponse>;
    isCustodian: ({ address }: {
        address: string;
    }) => Promise<IsCustodianResponse>;
    getCustodian: () => Promise<GetCustodianResponse>;
    getOwner: () => Promise<GetOwnerResponse>;
    isOwner: ({ address }: {
        address: string;
    }) => Promise<IsOwnerResponse>;
}
export declare class WbtcControllerQueryClient implements WbtcControllerReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getMintRequest: ({ nonce }: {
        nonce: Uint64;
    }) => Promise<GetMintRequestResponse>;
    getMintRequestsLength: () => Promise<GetMintRequestsLengthResponse>;
    getBurnRequest: ({ nonce }: {
        nonce: Uint64;
    }) => Promise<GetBurnRequestResponse>;
    getBurnRequestsLength: () => Promise<GetBurnRequestsLengthResponse>;
    getTokenDenom: () => Promise<GetTokenDenomResponse>;
    isMerchant: ({ address }: {
        address: string;
    }) => Promise<IsMerchantResponse>;
    isCustodian: ({ address }: {
        address: string;
    }) => Promise<IsCustodianResponse>;
    getCustodian: () => Promise<GetCustodianResponse>;
    getOwner: () => Promise<GetOwnerResponse>;
    isOwner: ({ address }: {
        address: string;
    }) => Promise<IsOwnerResponse>;
}
export interface WbtcControllerInterface extends WbtcControllerReadOnlyInterface {
    contractAddress: string;
    sender: string;
    transferOwnership: ({ newOwnerAddress }: {
        newOwnerAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setCustodian: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addMerchant: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeMerchant: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setCustodianDepositAddress: ({ depositAddress, merchant }: {
        depositAddress: string;
        merchant: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setMerchantDepositAddress: ({ depositAddress }: {
        depositAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addMintRequest: ({ amount, depositAddress, txId }: {
        amount: Uint128;
        depositAddress: string;
        txId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    cancelMintRequest: ({ requestHash }: {
        requestHash: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    confirmMintRequest: ({ requestHash }: {
        requestHash: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    rejectMintRequest: ({ requestHash }: {
        requestHash: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    confirmBurnRequest: ({ requestHash, txId }: {
        requestHash: string;
        txId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unpause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class WbtcControllerClient extends WbtcControllerQueryClient implements WbtcControllerInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    transferOwnership: ({ newOwnerAddress }: {
        newOwnerAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setCustodian: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addMerchant: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeMerchant: ({ address }: {
        address: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setCustodianDepositAddress: ({ depositAddress, merchant }: {
        depositAddress: string;
        merchant: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setMerchantDepositAddress: ({ depositAddress }: {
        depositAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addMintRequest: ({ amount, depositAddress, txId }: {
        amount: Uint128;
        depositAddress: string;
        txId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    cancelMintRequest: ({ requestHash }: {
        requestHash: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    confirmMintRequest: ({ requestHash }: {
        requestHash: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    rejectMintRequest: ({ requestHash }: {
        requestHash: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    confirmBurnRequest: ({ requestHash, txId }: {
        requestHash: string;
        txId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unpause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=WbtcController.client.d.ts.map