/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Uint128, InstantiateMsg, MigrateMsg, QueryMsg, Uint64, Timestamp, GetBurnRequestResponse, GetBurnRequestsLengthResponse, GetCustodianResponse, GetMintRequestResponse, GetMintRequestsLengthResponse, GetOwnerResponse, GetTokenDenomResponse, IsCustodianResponse, IsMerchantResponse, IsOwnerResponse } from "./WbtcController.types";
export interface WbtcControllerReadOnlyInterface {
  contractAddress: string;
  getMintRequest: ({
    nonce
  }: {
    nonce: Uint64;
  }) => Promise<GetMintRequestResponse>;
  getMintRequestsLength: () => Promise<GetMintRequestsLengthResponse>;
  getBurnRequest: ({
    nonce
  }: {
    nonce: Uint64;
  }) => Promise<GetBurnRequestResponse>;
  getBurnRequestsLength: () => Promise<GetBurnRequestsLengthResponse>;
  getTokenDenom: () => Promise<GetTokenDenomResponse>;
  isMerchant: ({
    address
  }: {
    address: string;
  }) => Promise<IsMerchantResponse>;
  isCustodian: ({
    address
  }: {
    address: string;
  }) => Promise<IsCustodianResponse>;
  getCustodian: () => Promise<GetCustodianResponse>;
  getOwner: () => Promise<GetOwnerResponse>;
  isOwner: ({
    address
  }: {
    address: string;
  }) => Promise<IsOwnerResponse>;
}
export class WbtcControllerQueryClient implements WbtcControllerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getMintRequest = this.getMintRequest.bind(this);
    this.getMintRequestsLength = this.getMintRequestsLength.bind(this);
    this.getBurnRequest = this.getBurnRequest.bind(this);
    this.getBurnRequestsLength = this.getBurnRequestsLength.bind(this);
    this.getTokenDenom = this.getTokenDenom.bind(this);
    this.isMerchant = this.isMerchant.bind(this);
    this.isCustodian = this.isCustodian.bind(this);
    this.getCustodian = this.getCustodian.bind(this);
    this.getOwner = this.getOwner.bind(this);
    this.isOwner = this.isOwner.bind(this);
  }

  getMintRequest = async ({
    nonce
  }: {
    nonce: Uint64;
  }): Promise<GetMintRequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_mint_request: {
        nonce
      }
    });
  };
  getMintRequestsLength = async (): Promise<GetMintRequestsLengthResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_mint_requests_length: {}
    });
  };
  getBurnRequest = async ({
    nonce
  }: {
    nonce: Uint64;
  }): Promise<GetBurnRequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_burn_request: {
        nonce
      }
    });
  };
  getBurnRequestsLength = async (): Promise<GetBurnRequestsLengthResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_burn_requests_length: {}
    });
  };
  getTokenDenom = async (): Promise<GetTokenDenomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_token_denom: {}
    });
  };
  isMerchant = async ({
    address
  }: {
    address: string;
  }): Promise<IsMerchantResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_merchant: {
        address
      }
    });
  };
  isCustodian = async ({
    address
  }: {
    address: string;
  }): Promise<IsCustodianResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_custodian: {
        address
      }
    });
  };
  getCustodian = async (): Promise<GetCustodianResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_custodian: {}
    });
  };
  getOwner = async (): Promise<GetOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_owner: {}
    });
  };
  isOwner = async ({
    address
  }: {
    address: string;
  }): Promise<IsOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_owner: {
        address
      }
    });
  };
}
export interface WbtcControllerInterface extends WbtcControllerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  transferOwnership: ({
    newOwnerAddress
  }: {
    newOwnerAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setCustodian: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addMerchant: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeMerchant: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setCustodianDepositAddress: ({
    depositAddress,
    merchant
  }: {
    depositAddress: string;
    merchant: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setMerchantDepositAddress: ({
    depositAddress
  }: {
    depositAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addMintRequest: ({
    amount,
    depositAddress,
    txId
  }: {
    amount: Uint128;
    depositAddress: string;
    txId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  cancelMintRequest: ({
    requestHash
  }: {
    requestHash: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  confirmMintRequest: ({
    requestHash
  }: {
    requestHash: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  rejectMintRequest: ({
    requestHash
  }: {
    requestHash: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  confirmBurnRequest: ({
    requestHash,
    txId
  }: {
    requestHash: string;
    txId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  pause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unpause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WbtcControllerClient extends WbtcControllerQueryClient implements WbtcControllerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.transferOwnership = this.transferOwnership.bind(this);
    this.setCustodian = this.setCustodian.bind(this);
    this.addMerchant = this.addMerchant.bind(this);
    this.removeMerchant = this.removeMerchant.bind(this);
    this.setCustodianDepositAddress = this.setCustodianDepositAddress.bind(this);
    this.setMerchantDepositAddress = this.setMerchantDepositAddress.bind(this);
    this.addMintRequest = this.addMintRequest.bind(this);
    this.cancelMintRequest = this.cancelMintRequest.bind(this);
    this.confirmMintRequest = this.confirmMintRequest.bind(this);
    this.rejectMintRequest = this.rejectMintRequest.bind(this);
    this.burn = this.burn.bind(this);
    this.confirmBurnRequest = this.confirmBurnRequest.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
  }

  transferOwnership = async ({
    newOwnerAddress
  }: {
    newOwnerAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_ownership: {
        new_owner_address: newOwnerAddress
      }
    }, fee, memo, funds);
  };
  setCustodian = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_custodian: {
        address
      }
    }, fee, memo, funds);
  };
  addMerchant = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_merchant: {
        address
      }
    }, fee, memo, funds);
  };
  removeMerchant = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_merchant: {
        address
      }
    }, fee, memo, funds);
  };
  setCustodianDepositAddress = async ({
    depositAddress,
    merchant
  }: {
    depositAddress: string;
    merchant: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_custodian_deposit_address: {
        deposit_address: depositAddress,
        merchant
      }
    }, fee, memo, funds);
  };
  setMerchantDepositAddress = async ({
    depositAddress
  }: {
    depositAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_merchant_deposit_address: {
        deposit_address: depositAddress
      }
    }, fee, memo, funds);
  };
  addMintRequest = async ({
    amount,
    depositAddress,
    txId
  }: {
    amount: Uint128;
    depositAddress: string;
    txId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_mint_request: {
        amount,
        deposit_address: depositAddress,
        tx_id: txId
      }
    }, fee, memo, funds);
  };
  cancelMintRequest = async ({
    requestHash
  }: {
    requestHash: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_mint_request: {
        request_hash: requestHash
      }
    }, fee, memo, funds);
  };
  confirmMintRequest = async ({
    requestHash
  }: {
    requestHash: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      confirm_mint_request: {
        request_hash: requestHash
      }
    }, fee, memo, funds);
  };
  rejectMintRequest = async ({
    requestHash
  }: {
    requestHash: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reject_mint_request: {
        request_hash: requestHash
      }
    }, fee, memo, funds);
  };
  burn = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        amount
      }
    }, fee, memo, funds);
  };
  confirmBurnRequest = async ({
    requestHash,
    txId
  }: {
    requestHash: string;
    txId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      confirm_burn_request: {
        request_hash: requestHash,
        tx_id: txId
      }
    }, fee, memo, funds);
  };
  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, funds);
  };
  unpause = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unpause: {}
    }, fee, memo, funds);
  };
}
